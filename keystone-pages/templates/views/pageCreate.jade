extends ../../../node_modules/keystone/templates/layout/base

include ../../../node_modules/keystone/templates/mixins/columns

block css
	link(rel="stylesheet", href="/keystone/js/lib/fancybox/jquery.fancybox.css")
	if list.fieldTypes.markdown
		link(rel="stylesheet", href="/keystone/js/lib/bootstrap-markdown/css/bootstrap-markdown.css")
	if list.fieldTypes.code
		link(rel="stylesheet", href="/keystone/js/lib/codemirror/codemirror.css")

block js
	script(src="/keystone/js/common/ui-fixed-toolbar.js")
	script(src="/keystone/js/lib/joseph-myers/md5.js")
	script(src="/keystone/js/lib/fancybox/jquery.fancybox.pack.js")
	script(src="/keystone/js/lib/html5sortable/jquery.sortable.js")
	if list.fieldTypes.location
		script(src="/keystone/js/common/ui-location.js")
	if list.fieldTypes.cloudinaryimage
		script(src="/keystone/js/common/ui-cloudinaryimage.js")
	if list.fieldTypes.cloudinaryimages
		script(src="/keystone/js/common/ui-cloudinaryimages.js")
	if list.fieldTypes.s3file
		script(src="/keystone/js/common/ui-s3file.js")
	if list.fieldTypes.azurefile
		script(src="/keystone/js/common/ui-azurefile.js")
	if list.fieldTypes.localfile
		script(src="/keystone/js/common/ui-localfile.js")
	if list.fieldTypes.markdown
		script(src='/keystone/js/lib/marked/marked.js')
		script(src='/keystone/js/lib/bootstrap-markdown/js/bootstrap-markdown.js')
		script(src="/keystone/js/common/ui-markdown.js")
	if list.fieldTypes.code
		script(src="/keystone/js/common/ui-code.js")
		script(src='/keystone/js/lib/codemirror/codemirror-compressed.js')
	if list.fieldTypes.wysiwyg
		script(src='/keystone/js/lib/tinymce/tinymce.min.js')
		script(src='/keystone/js/lib/tinymce/jquery.tinymce.min.js')
		script(src="/keystone/js/common/ui-wysiwyg.js")
	
	script(src='/keystone/js/views/item.js')
	script.
		Keystone.list = { path: "#{list.path}" };
		Keystone.wysiwyg = { options: !{JSON.stringify(wysiwygOptions)} };


block intro

block content
	form(method='post', action='/keystone/page-create/')
		input(type='hidden', name='action', value='create')
		input(type='hidden', name='parent', value=parent)
		input(type='hidden', name='pageType', value=pageType)
		input(type='hidden', name=csrf_token_key, value=csrf_token_value)
		.form
			h4 New #{list.singular}
			if list.nameIsInitial
				if list.nameField.type == 'name'
					.field.item-name: .col-sm-12: input(type='text', name=list.nameField.paths.full, value=submitted[list.nameField.paths.full], placeholder=list.singular + ' ' + list.nameField.label.toLowerCase()).form-control.input-lg
				else if list.nameField.type == 'text'
					.field.item-name: .col-sm-12: input(type='text', name=list.nameField.path, value=submitted[list.nameField.path], placeholder=list.singular + ' ' + list.nameField.label.toLowerCase()).form-control.input-lg
				else
					.alert.alert-danger Unsupported field type (#{list.nameField.type}) for item name (#{list.nameField.path}).
			
			each field in list.initialFields
				|!{field.render('initial',submitted) }

		.toolbar
			.toolbar-create
				button(type='submit').btn.btn-default.btn-create Create
